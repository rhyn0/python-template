[tool.ruff]
# Enable autofix for rules that support it.
fix = true
# Indent width for long-line violations
indent-width = 4
# Same as Black.
line-length = 88
# could choose 'full', 'grouped', or 'github'
output-format = "concise"
required-version = ">=0.6.5"

# ignore files that are not tracked
respect-gitignore = true
# Show fixes in the output.
show-fixes = true
target-version = "py312"
extend-exclude = ["scripts"]

[tool.ruff.format]
skip-magic-trailing-comma = false
line-ending = "lf"

[tool.ruff.lint]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
# all rules are fixable
fixable = ["ALL"]
unfixable = []
ignore = [
    "D100",   # Missing docstring in public module
    "FIX002", # Line contains TODO, consider resolving issue
    "TD003",  # Missing issue link on line with TODO
]
select = ["ALL"]

[tool.ruff.lint.per-file-ignores]


[tool.ruff.lint.flake8-errmsg]
# Maximum string length for string literals in exception messages.
max-string-length = 20

[tool.ruff.lint.flake8-pytest-style]
# purely for code style consistency, pytest handles both the same
# Boolean flag specifying whether @pytest.fixture() without parameters should have parentheses.
fixture-parentheses = false
# Boolean flag specifying whether @pytest.mark.foo() without parameters should have parentheses.
mark-parentheses = false

[tool.ruff.lint.isort]
case-sensitive = true
# Forces all from imports to appear on their own line.
force-single-line = true
# Don't sort straight-style imports (like import sys) before from-style imports (like from itertools import groupby).
# Instead, sort the imports by module, independent of import style.
force-sort-within-sections = true
# our code packages
known-first-party = []


[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
addopts = ["--doctest-modules", "--doctest-continue-on-failure"]
minversion = "8.0"
testpaths = ["tests"]
doctest_optionflags = "ELLIPSIS NORMALIZE_WHITESPACE"
asyncio_default_fixture_loop_scope = "session"
asyncio_mode = "strict"

[tool.pytest_env]
# put key value pairs to load into the environment prior to test run

[tool.mypy]
mypy_path = "."
python_version = "3.12"
warn_unreachable = true
warn_unused_ignores = true
warn_unused_configs = true
enable_incomplete_feature = "NewGenericSyntax"

[tool.coverage.run]
branch = true
command_line = "-m pytest --config-file=pyproject.toml -q --cov-reset "

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]
format = "markdown"
fail_under = 80
show_missing = true
skip_covered = true
skip_empty = true

[tool.coverage.html]
directory = "coverage_html_report"
title = "Coverage Report"
